module Language.Abstract where

open import Category.Endofunctor
  as Endofunctor
  using ( Functor ; lift )

open import Category.UnitFunctor
  using ( UnitFunctor )

open import Data.Bool
  using ()
  renaming ( Bool to ùîπ )

open import Data.Fin
  using ( Fin )

open import Data.Integer
  using ( ‚Ñ§ )

open import Data.Nat
  using ( ‚Ñï ; suc )

open import Data.Vec
  using ( Vec ; _‚à∑_ ; lookup )

import Level

open import Relation.Binary
  using ( Rel )

open import Relation.Binary.PropositionalEquality
  using ( _‚â°_ )

open import Size
  using ( Size ; Size<_ ; ‚àû )

open import Type.Abstract
  using ( Concretisation ; ŒºTransMap )


private

  SizedSet = Endofunctor.SizedSet Level.zero

  {-# NO_POSITIVITY_CHECK #-}
  data ŒºType (F : SizedSet ‚Üí SizedSet) (i : Size) : Set where
    Int : ŒºType F i
    Bool : ŒºType F i
    _‚ûî_ : {j : Size< i} (T‚ÇÅ T‚ÇÇ : F (ŒºType F) j) ‚Üí ŒºType F i

  map : ŒºTransMap ŒºType
  map f Int = Int
  map f Bool = Bool
  map {G = G} f (_‚ûî_ {j} T‚ÇÅ T‚ÇÇ) = f {j} (lift {B = ŒºType G} (map f) T‚ÇÅ) ‚ûî f {j} (lift {B = ŒºType G} (map f) T‚ÇÇ)

module Language (F : Set ‚Üí Set) ‚¶É unit-functor : UnitFunctor F ‚¶Ñ where

  open ŒºType
    public

  open UnitFunctor unit-functor

  concretisation : Concretisation {ŒºType = ŒºType} map
  Concretisation.F concretisation = Œª A i ‚Üí F (A i)

  open Concretisation concretisation
    using ( rec ; rel )
    public

  open Concretisation concretisation
    using ( FRel ; module Types )

  open Types ‚àû
    public

  _‚âà_ : Rel FType _
  _‚âà_ = FRel _‚â°_

  data _‚âà_‚äì_ (T‚ÇÅ T‚ÇÇ T‚ÇÉ : FType) : Set where
    rel : T‚ÇÅ ‚âà T‚ÇÇ ‚Üí T‚ÇÅ ‚âà T‚ÇÉ ‚Üí T‚ÇÅ ‚âà T‚ÇÇ ‚äì T‚ÇÉ

  data _‚âà-dom_ (T‚ÇÅ T‚ÇÇ : FType) : Set where
    rel : ‚àÄ {T‚ÇÉ} ‚Üí T‚ÇÇ ‚âà unit (T‚ÇÅ ‚ûî T‚ÇÉ) ‚Üí T‚ÇÅ ‚âà-dom T‚ÇÇ

  data _‚âà-cod_ (T‚ÇÅ T‚ÇÇ : FType) : Set where
    rel : ‚àÄ {T‚ÇÉ} ‚Üí T‚ÇÇ ‚âà unit (T‚ÇÉ ‚ûî T‚ÇÅ) ‚Üí T‚ÇÅ ‚âà-cod T‚ÇÇ

  data Term (n : ‚Ñï) : Set where
    int : (x : ‚Ñ§) ‚Üí Term n
    bool : (x : ùîπ) ‚Üí Term n
    var : (x : Fin n) ‚Üí Term n
    abs : (T : FType) (t : Term (suc n)) ‚Üí Term n
    _‚àô_ : (t‚ÇÅ t‚ÇÇ : Term n) ‚Üí Term n
    _+_ : (t‚ÇÅ t‚ÇÇ : Term n) ‚Üí Term n
    if_then_else_ : (t‚ÇÅ t‚ÇÇ t‚ÇÉ : Term n) ‚Üí Term n
    _‚à∂_ : (t : Term n) (T : FType) ‚Üí Term n

  data _‚ä¢_‚à∂_ {n} : Vec FType n ‚Üí Term n ‚Üí FType ‚Üí Set where
    int : ‚àÄ {Œì x} ‚Üí Œì ‚ä¢ int x ‚à∂ unit Int
    bool : ‚àÄ {Œì x} ‚Üí Œì ‚ä¢ bool x ‚à∂ unit Bool
    var : ‚àÄ {Œì i} ‚Üí Œì ‚ä¢ var i ‚à∂ lookup Œì i
    abs : ‚àÄ {Œì T‚ÇÅ T‚ÇÇ t} ‚Üí (T‚ÇÅ ‚à∑ Œì) ‚ä¢ t ‚à∂ T‚ÇÇ ‚Üí Œì ‚ä¢ abs T‚ÇÅ t ‚à∂ unit (T‚ÇÅ ‚ûî T‚ÇÇ)
    app : ‚àÄ {Œì T‚ÇÅ T‚ÇÇ T‚ÇÉ t‚ÇÅ t‚ÇÇ}
          ‚Üí Œì ‚ä¢ t‚ÇÅ ‚à∂ T‚ÇÅ ‚Üí Œì ‚ä¢ t‚ÇÇ ‚à∂ T‚ÇÇ ‚Üí T‚ÇÇ ‚âà-dom T‚ÇÅ ‚Üí T‚ÇÉ ‚âà-cod T‚ÇÅ
          ‚Üí Œì ‚ä¢ (t‚ÇÅ ‚àô t‚ÇÇ) ‚à∂ T‚ÇÉ
    add : ‚àÄ {Œì T‚ÇÅ T‚ÇÇ t‚ÇÅ t‚ÇÇ}
          ‚Üí Œì ‚ä¢ t‚ÇÅ ‚à∂ T‚ÇÅ ‚Üí Œì ‚ä¢ t‚ÇÇ ‚à∂ T‚ÇÇ ‚Üí T‚ÇÅ ‚âà unit Int ‚Üí T‚ÇÇ ‚âà unit Int
          ‚Üí Œì ‚ä¢ (t‚ÇÅ + t‚ÇÇ) ‚à∂ unit Int
    cond : ‚àÄ {Œì T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ t‚ÇÅ t‚ÇÇ t‚ÇÉ}
            ‚Üí Œì ‚ä¢ t‚ÇÅ ‚à∂ T‚ÇÅ ‚Üí Œì ‚ä¢ t‚ÇÇ ‚à∂ T‚ÇÇ ‚Üí Œì ‚ä¢ t‚ÇÉ ‚à∂ T‚ÇÉ
            ‚Üí T‚ÇÅ ‚âà unit Bool ‚Üí T‚ÇÑ ‚âà T‚ÇÇ ‚äì T‚ÇÉ
            ‚Üí Œì ‚ä¢ if t‚ÇÅ then t‚ÇÇ else t‚ÇÉ ‚à∂ T‚ÇÑ
    cast : ‚àÄ {Œì T‚ÇÅ T‚ÇÇ t} ‚Üí Œì ‚ä¢ t ‚à∂ T‚ÇÅ ‚Üí T‚ÇÅ ‚âà T‚ÇÇ ‚Üí Œì ‚ä¢ (t ‚à∂ T‚ÇÇ) ‚à∂ T‚ÇÇ
